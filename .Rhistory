marker = list(opacity = 0.6, size = 4))
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = cut, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
help(datasets)
library(help = "datasets")
CO2
WWWUsafe
WWWusage
cars
co2
esoph
iris
swiss
presidents
InsectSprays
BJSales
BJsales
CO2
library(ggplot2)
library(plotly)
ds <- diamonds
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = clarity, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
library(ggplot2)
library(plotly)
library(datasets)
ds <- diamonds
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = clarity, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
plot_ly(ds, x = clarity, y = carat, z = price, group = color, type = "scatter3d"))
plot_ly(ds, x = clarity, y = carat, z = price, group = color, type = "scatter3d")
,
library(ggplot2)
library(plotly)
library(dataset)
ds <- diamonds
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = clarity, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
help("diamonds")
ds <- diamonds
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = cut, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
ds <- diamonds
ds$cut <- factor(ds$cut, c("Fair", "Good", "Very Good", "Premium", "Ideal"), ordered = TRUE)
plot_ly(ds, x = cut, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers",
marker = list(opacity = 0.6, size = 4))
plot_ly(ds, x = cut, y = carat, z = price, group = color, type = "scatter3d", sort = FALSE, mode = "markers")
plot_ly(ds, x = cut, y = carat, z = price, group = color, type = "scatter3d")
help("diamonds")
help(plotly)
help(plot_ly)
??plotly
ds2$clarity2 <- factor(ds2$clarity, c("I1", "VS1", "IF"))
levels(ds2$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- ds2[ds2$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
p <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'")))
library(ggplot2)
library(plotly)
# PLOT 2:
ds2$clarity2 <- factor(ds2$clarity, c("I1", "VS1", "IF"))
levels(ds2$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- ds2[ds2$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
p <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'")))
ds <- diamonds
ds2<- as.data.frame(diamonds)
ds2$clarity2 <- factor(ds2$clarity, c("I1", "VS1", "IF"))
levels(ds2$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- ds2[ds2$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
p <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'")))
p
help(diamonds)
ds2$clarity2 <- factor(ds2$clarity, c("I1", "VS1", "IF"))
levels(ds2$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- ds2[ds2$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)", type = "log"),
zaxis = list(title = "Price in US dollar '$'")))
library(ggplot2)
library(plotly)
ds <- diamonds
ds2<- as.data.frame(diamonds)
ds2$clarity2 <- factor(ds2$clarity, c("I1", "VS1", "IF"))
levels(ds2$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- ds2[ds2$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)", type = "log"),
zaxis = list(title = "Price in US dollar '$'")))
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'"), type = "log"))
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity", type = "log"),
yaxis = list(title = "Weight of the diamond (carat)", type = "log"),
zaxis = list(title = "Price in US dollar '$'"), type = "log"))
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity", type = "log"),
yaxis = list(title = "Weight of the diamond (carat)", type = "log"),
zaxis = list(title = "Price in US dollar '$'"), type = "log"))
plot2
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'"), type = "log"))
plot2
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)", type = "log"),
zaxis = list(title = "Price in US dollar '$'"), type = "log"))
plot2
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'"))) %>%
add_trace(group = color, name = "Orange Trace")
plot2
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'")))
plot2
help("diamonds")
help(diamonds)
library(datasets)
help(diamonds)
help("diamonds")
??diamonds
ds <- diamonds
plot1a <- ggplot(data=ds, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
library(ggplot2)
library(plotly)
ds <- diamonds
set.seed(111)
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
plot1a <- ggplot(data=ds, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
dsframe <- as.data.frame(diamonds)
# PLOT 1a: Scatter plot carat vs. price from a sample of 20% of the population.
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
plot1a <- ggplot(data=sample, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
dsframe <- as.data.frame(diamonds)
# PLOT 1a: Scatter plot carat vs. price from a sample of 20% of the population.
set.seed(111)
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
plot1a <- ggplot(data=sample, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
ds <- diamonds
dsframe <- as.data.frame(diamonds)
# PLOT 1a: Scatter plot carat vs. price from a sample of 20% of the population.
set.seed(111)
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
plot1a <- ggplot(data=sample, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
set.seed(111)
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
??sample_n
library(dplyr)
sample <- sample_n(dsframe, nrow(dsframe)*0.2)
plot1a <- ggplot(data=sample, aes(x=carat, y=price))+
geom_point(aes(color=color), shape=18)+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Scatter plot carat vs. price (20% sample)")
plot1a
plot1b <- ggplot(data=dsframe, aes(x=carat, y=price, group=color))+
geom_smooth(aes(color=color))+
xlab("Weight of the diamond (carat)")+
ylab("Price in US dollar '$'")+
ggtitle("Smooth lines of carat vs. price grouped by colors")
plot1b
help("diamonds")
dsframe$clarity2 <- factor(dsframe$clarity, c("I1", "VS1", "IF"))
levels(dsframe$clarity2)<-c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)")
newframe <- dsframe[dsframe$clarity2 %in% c("Worst Quality (I1)", "Normal Quality (VS1)", "Best Quality (IF)"),]
# The plot_ly function is very similat to the ggplot function.
plot2 <- plot_ly(newframe[order(newframe$clarity2),], x = clarity2, y = carat, z = price, group = color, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter plot",
scene = list(
xaxis = list(title = "Clarity"),
yaxis = list(title = "Weight of the diamond (carat)"),
zaxis = list(title = "Price in US dollar '$'")))
plot2
install.packages("tm")
install.packages("workcloud")
install.packages("worldcloud")
install.packages("wordcloud")
install.packages("RWeka")
install.packages("reshape2")
install.packages("rJava")
install.packages("openNLP")
install.packages("openNLPmodels.en")
install.packages("stringr")
install.packages("SPARQL")
install.packages("ggplot2movies")
help("movies")
movies
library(ggplot2movies)
movies
head(movies)
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/lab8/Lab8.RData")
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/lab8/Lab8.RData")
bai.ts=ts(BAI.data[,2:4], start=min(BAI.data$year))
str(bai.ts)
plot(bai.ts)
# MODEL IDENTIFICATION. Clearly non-stationary
acf2(bai.ts[,1])
library("forecast")
library(forecast)
install.packages("forecast")
library("forecast")
library(tseries)
install.packages(astsa)
install.packages("astsa")
library(astsa)
library(cart)
library(car)
acf2(bai.ts[,1])
best.bai=auto.arima(bai.ts[,1],d=1,max.p=10,max.q=10,xreg=bai.ts[,2])
best.bai  #it is the same as bai.ts2
# CHECKING MODEL ASSUMPTIONS
acf2(bai.ts2$residuals)
Box.test(bai.ts2$residuals, lag=12) #no significant autocorrelations for the first 12 lags
jarque.bera.test(bai.ts2$residuals)
tsdiag(bai.ts2) #some atypical data. Delete this observation and refit the model.
bai.ts1=Arima(bai.ts[,1], order=c(0,1,1))
bai.ts2=Arima(bai.ts[,1], order=c(0,1,1), xreg=bai.ts[,2])
summary(bai.ts2)
summary(bai.ts1)
# AUTOMATIC MODEL FITTING
best.bai=auto.arima(bai.ts[,1],d=1,max.p=10,max.q=10,xreg=bai.ts[,2])
best.bai  #it is the same as bai.ts2
# CHECKING MODEL ASSUMPTIONS
acf2(bai.ts2$residuals)
Box.test(bai.ts2$residuals, lag=12) #no significant autocorrelations for the first 12 lags
jarque.bera.test(bai.ts2$residuals)
tsdiag(bai.ts2) #some atypical data. Delete this observation and refit the model.
# Refitting the model without observation 17.
bai.ts3=Arima(bai.ts[,1][-17], order=c(0,1,1), xreg=bai.ts[,2][-17])
Box.test(bai.ts3$residuals, lag=12, fitdf=1)
jarque.bera.test(bai.ts3$residuals)
tsdisplay(bai.ts3$residuals)
qqPlot(bai.ts3$residuals) # package car
tsdisplay(bai.ts3$residuals, plot.type="scatter")
tsdisplay(bai.ts3$residuals, plot.type="partial")
tsdisplay(bai.ts3$residuals, plot.type="spectrum")
plot(forecast(bai.ts3, h=20,xreg=rnorm(20,mean=-0.5, sd=0.25)))
# Refiting the original model without the regressor and deleting that observation
bai.ts4=Arima(bai.ts[,1][-17], order=c(0,1,1))
jarque.bera.test(bai.ts4$residuals)
plot(forecast(bai.ts4)) # MA(1) models provide only one prediction different from the marginal mean
unemp.ts=ts(unemp.data$V1, start=1948, frequency=12)
# Exploring seasonality (declared frequency must be >1), seasonplot in package forecast
monthplot(unemp.ts)
seasonplot(unemp.ts)
acf2(unemp.ts) #non-stationary
monthplot(unemp.ts)
seasonplot(unemp.ts)
acf2(unemp.ts) #non-stationary
# MAKING THE SERIES STATIONARY
sd(unemp.ts)
sd(diff(unemp.ts,12))
sd(diff(diff(unemp.ts,12))) #we are going to take one first order difference and one seasonal difference
# MODEL IDENTIFICATION
acf2(diff(diff(unemp.ts,12)), max.lag=40)
#MODEL FITTING
model.1=Arima(unemp.ts,order=c(2,1,0),seasonal=list(order=c(0,1,1), period=12))
model.2=Arima(unemp.ts,order=c(2,1,0),seasonal=list(order=c(3,1,0), period=12))
model.3=Arima(unemp.ts,order=c(2,1,0),seasonal=list(order=c(3,1,1), period=12))
model.4=Arima(unemp.ts,order=c(0,1,4),seasonal=list(order=c(3,1,0), period=12))
model.5=Arima(unemp.ts,order=c(0,1,4),seasonal=list(order=c(0,1,1), period=12))
Box.test(model.2$residuals, lag=20, fitdf=5, type="L")
jarque.bera.test(model.2$residuals)
which.max(model.2$residuals)
jarque.bera.test(model.2$residuals[-325])
df <- read.csv("../data/movie_metadata.csv", nrows=3000)
`2000` <- read.csv("C:/Users/Javier/Desktop/2000.csv")
df <- read.csv("C:/Users/Javier/Desktop/2000.csv", nrows=3000)
r2mult
r2multv(
)
r2multv<-function(x){
r2s=1-1/(diag(solve(cov(x)))*diag(cov(x)))
r2s
}
r2multv(df[,c("DepTime","CRSDepTime","CRSArrTime")])
r2multv
r2multv(df[,c("DepTime")])
r2multv(df[,c("DepTime", "CRSDepTime")])
df
df <- read.csv("C:/Users/Javier/Desktop/2000.csv", nrows=3000)
df
r2multv(df[,c("DepTime")])
df[,c("DepTime")]
df2<- na.omit(df)
df2<- na.omit(df[c("CRSDepTime", "ArrTime", "CRSArrtime")])
df2<- na.omit(df[,c("CRSDepTime", "ArrTime", "CRSArrtime")])
df2<- na.omit(df[,c("CRSDepTime", "ArrTime", "CRSArrTime")])
r2multv(df[,c("CRSDepTime", "ArrTime", "CRSArrTime")])
r2multv(df[,c("CRSDepTime", "ArrTime")])
cor(df)
crr(df)
corr(df)
cov(df, use="complete.obs")
df
df=df[-c("CarrierDelay")]
df=df[-c(,"CarrierDelay")]
df=df[,-c("CarrierDelay")]
cor(df, use="complete.obs")
x = df[,c("DepTime")]
y = df[,c("ArrTime")]
corr(x,y)
cor(x,y)
cov(mtcars, use="complete.obs")
cov(x,y, use="complete.obs")
cor(x,y, use="complete.obs")
r2multv([x,y])
r2multv(x,y)
r2multv
z = (x,y)
r2multv(df[c(,"DepTime", ArrTime)])
r2multv(df[,c("DepTime", ArrTime)])
r2multv(df[,c("DepTime", "ArrTime)])
## Part 3
help(stl)
setwd("D:/Google Drive/EIT/Intelligent Data Analysis/homeworks/homework_set3")
visados.df <- read.csv("data/data_g2.csv", header=T, sep=",", stringsAsFactors = FALSE)
plot(visados.ts)
visados.df <- read.csv("data/data_g2.csv", header=T, sep=",", stringsAsFactors = FALSE)
# Create TS object, starting from 1997
visados.ts <- ts(visados.df$Visados, start=c(1997,1), end=c(2013, 8), frequency = 12)
# 1- PLOT AND COMMENT
plot(visados.ts)
stl.visados=stl(log(visados.ts), s.window="periodic", robust=TRUE)
plot(stl.visados)
stl.visados
stl.visados$time.series
stl.visados
stl.visados$figure
stl.visados
stl(log(visados.ts), s.window="periodic")
stl(log(visados.ts), s.window="periodic")$deg
stl(log(visados.ts), s.window="periodic")$win
stl(log(visados.ts), s.window="periodic")$weights
stl(log(visados.ts), s.window="periodic", robust=TRUE)
stl(log(visados.ts), s.window="periodic", robust=TRUE)$weights
stl(log(visados.ts), s.window="periodic", robust=TRUE)$call
monthplot(log(visados.ts))
monthplot(log(visados.ts), s.window=13)
monthplot(log(visados.ts), s.window=10)
monthplot(log(visados.ts), s.window=3)
warnings(())
warnings()
help(stl)
visados.stl <- stl(log(visados.ts), s.window="periodic", robust=TRUE)
plot(visados.stl)
visados.stl <- stl(log(visados.ts), s.window="periodic", robust=TRUE)
plot(visados.stl)
visados.stl <- stl(log(visados.ts), s.window="periodic")
plot(visados.stl)
par(mfrow=c(2,1))
plot(visados.ts)
plot(exp(seasadj(visados.stl)))
library(forecast)
library(astsa)
library(tseries)
library(car)
library(astsa)
par(mfrow=c(2,1))
plot(visados.ts)
plot(exp(seasadj(visados.stl)))
summary(visados.stl)
tsdisplay(stl.visados$time.series[,c("remainder")])
visados.stl.remainder = visados.stl$time.series[,c("remainder")]
tsdisplay(visados.stl.remainder)
adf.test(visados.stl.remainder) # p-value, no stationary
help(adf.test)
visados.ts.diff1_12 = diff(log(visados.ts), lag = 12)
adf.test(visados.ts.diff1_12) # p-value, no stationary
adf.test(visados.ts.diff2_12) # p-value pequeño, si stationary
visados.ts.diff2_12 = diff(diff(log(visados.ts), lag = 12))
adf.test(visados.ts.diff2_12) # p-value pequeño, si stationary
adf.test(visados.stl.remainder)
tsdisplay(visados.stl.remainder)
Box.test(visados.stl.remainder)
Box.test(visados.stl.remainder, lag=12)
help(Box.test)
visados.stl.remainder = visados.stl$time.series[,c("remainder")]
tsdisplay(visados.stl.remainder)
Box.test(visados.stl.remainder, lag=12)
Box.test(visados.stl.remainder, lag=12)
library(forecast)
library(tseries)
library(astsa)
library(car)
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/lab8/Lab8.RData")
bai.ts=ts(BAI.data[,2:4], start=min(BAI.data$year))
str(bai.ts)
plot(bai.ts)
library(forecast)
library(tseries)
library(astsa)
library(car)
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/lab8/Lab8.RData")
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/lab8/Lab8.RData")
load("D:/Google Drive/EIT/Intelligent Data Analysis/labs/tseries/lab8/Lab8.RData")
bai.ts=ts(BAI.data[,2:4], start=min(BAI.data$year))
str(bai.ts)
plot(bai.ts)
# MODEL IDENTIFICATION. Clearly non-stationary
acf2(bai.ts[,1])
# With a regular difference the series becomes stationary. It looks like an MA(1)
acf2(diff(bai.ts[,1]))
# MODEL FITTING
bai.ts1=Arima(bai.ts[,1], order=c(0,1,1))
bai.ts2=Arima(bai.ts[,1], order=c(0,1,1), xreg=bai.ts[,2])
summary(bai.ts2)
summary(bai.ts1)
# AUTOMATIC MODEL FITTING
best.bai=auto.arima(bai.ts[,1],d=1,max.p=10,max.q=10,xreg=bai.ts[,2])
best.bai  #it is the same as bai.ts2
# CHECKING MODEL ASSUMPTIONS
acf2(bai.ts2$residuals)
Box.test(bai.ts2$residuals, lag=12) #no significant autocorrelations for the first 12 lags
plot(forecast(bai.ts3, h=20,xreg=rnorm(20,mean=-0.5, sd=0.25)))
bai.ts3=Arima(bai.ts[,1][-17], order=c(0,1,1), xreg=bai.ts[,2][-17])
Box.test(bai.ts3$residuals, lag=12, fitdf=1)
jarque.bera.test(bai.ts3$residuals)
tsdisplay(bai.ts3$residuals)
qqPlot(bai.ts3$residuals) # package car
tsdisplay(bai.ts3$residuals, plot.type="scatter")
tsdisplay(bai.ts3$residuals, plot.type="partial")
tsdisplay(bai.ts3$residuals, plot.type="spectrum")
plot(forecast(bai.ts3, h=20,xreg=rnorm(20,mean=-0.5, sd=0.25)))
bai.ts4=Arima(bai.ts[,1][-17], order=c(0,1,1))
jarque.bera.test(bai.ts4$residuals)
plot(forecast(bai.ts4)) # MA(1) models provide only one prediction different from the marginal mean
help(forecast)
kpps.test(visados.stl.remainder)
kpss.test(visados.stl.remainder)
plot(forecast(stl.visados, method="naive")
plot(forecast(stl.visados, method="naive"))
plot(forecast(visados.stl, method="naive"))
plot(forecast(visados.stl, method="naive", robust=TRUE))
plot(forecast(visados.stl, method="p"))
plot(forecast(visados.stl, method="rwdrift"))
plot(forecast(visados.stl, method="naive"))
help(Box.test)
help(BoxCox)
tsdisplay(visados.ts)
tsdisplay(log(visados.ts))
