}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = myfunction(0,1,1,0,1,1)
arima_model
myfunction <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
arima <- Arima(log(visados.ts), order=c(pi,d,qi), seasonal=list(order=c(Pi,D,Qi), period=12))
rmse = accuracy(arima)[2]
if(rmse < min){
min <- rmse
arima_model <- paste(pi,d,qi,Pi,D,Qi)
}
},
error=function(cond){})
}
}}}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = myfunction(0,1,1,0,1,1)
arima_model
myfunction <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
arima <- Arima(log(visados.ts), order=c(pi,d,qi), seasonal=list(order=c(Pi,D,Qi), period=12))
rmse = accuracy(arima)[2]
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = myfunction(0,1,1,0,1,1)
model1 = Arima(log(visados.ts), order=c(2,1,1), seasonal=list(order=c(1,1,1), period=12))
# We suggest using h=10h=10 for non-seasonal data and h=2mh=2m for seasonal data, where mm is the period of seasonality.
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=2)
jarque.bera.test(model1$residuals)
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=2)
Box.test(model1$residuals, lag=24, fitdf=5)
jarque.bera.test(model1$residuals)
which.max(model1$residuals)
jarque.bera.test(model1$residuals[-117])
t.test(model1$residuals)
help(t.test)
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(qi in q:2){
for(Pi in P:2){
for(Qi in Q:2){
tryCatch({
arima <- Arima(log(visados.ts), order=c(pi,d,qi), seasonal=list(order=c(Pi,D,Qi), period=12))
rmse = accuracy(arima)[2]
if(rmse < min){
min <- rmse
arima_model <- paste(pi,d,qi,Pi,D,Qi)
}
},
error=function(cond){})
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,1,1,0,1,1)
arima_model
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,0,0,0,0,0)
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,0,0,0,0,0)
print(proctime()-tm)
arima_model
model1 = Arima(log(visados.ts), order=c(2,0,2), seasonal=list(order=c(2,2,2), period=12))
# We suggest using h=10h=10 for non-seasonal data and h=2mh=2m for seasonal data, where mm is the period of seasonality.
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=5)
jarque.bera.test(model1$residuals)
which.max(model1$residuals)
jarque.bera.test(model1$residuals[-117])
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=5)
model
model1
Box.test(model1$residuals, lag=24, fitdf=8)
acf2(model1$residuals)
model1
t.test(model1$residuals)
a=t.test(model1$residuals)
a$statistic
a$p.value
TRUE & TRUE
TRUE && TRUE
Box.test(model1$residuals)
a=Box.test(model1$residuals)
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05 && Box.test(arima$residuals, lag=24, fitdf=pi+qi+Pi+Qi) >= 0.05){
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,1,1,1,1,1)
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05 || Box.test(arima$residuals, lag=24, fitdf=pi+qi+Pi+Qi)$p.value >= 0.05){
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,1,1,1,1,1)
print(proc.time()-tm)
arima_model
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05 && Box.test(arima$residuals, lag=24, fitdf=pi+qi+Pi+Qi)$p.value >= 0.05){
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,0,0,0,0,0)
print(proc.time()-tm)
arima_model
model1 = Arima(log(visados.ts), order=c(2,0,2), seasonal=list(order=c(1,2,2), period=12))
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=7)
jarque.bera.test(model1$residuals)
which.max(model1$residuals)
jarque.bera.test(model1$residuals[-117])
which.max(model1$residuals[-117])
which.max(model1$residuals[-c(117,193)])
jarque.bera.test(model1$residuals[-c(117,193)])
which.max(model1$residuals[-c(117,193)])
which.max(model1$residuals[-c(117,193192)])
jarque.bera.test(model1$residuals[-c(117,193,192)])
which.max(model1$residuals[-c(117,193,192)])
jarque.bera.test(model1$residuals[-c(117,193,192,191)])
which.max(model1$residuals[-c(117,193,192,191)])
which.max(model1$residuals[-c(117,193,192,191, 190)])
jarque.bera.test(model1$residuals[-c(117,193,192,191, 190)])
which.max(model1$residuals[-c(117,193,192,191, 190)])
which.max(model1$residuals[-c(117,193,192,191, 190, 189)])
jarque.bera.test(model1$residuals[-c(117,193,192,191, 190)])
jarque.bera.test(model1$residuals[-c(117,193,192,191, 190, 189)])
which.max(model1$residuals[-c(117,193,192,191, 190, 189)])
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
cont = 0
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05 && Box.test(arima$residuals, lag=24, fitdf=pi+qi+Pi+Qi)$p.value >= 0.05){
cont <- cont+1
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model, "cont"=cont))
}
arima_model = getBestArima(0,0,0,0,0,0)
print(proc.time()-tm)
arima_model
jarque.bera.test(model1$residuals)
jarque.bera.test(model1$residuals)$p.value
jarque.bera.test(model1$residuals[-which.max(model1$residuals)])$p.value
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q){
min <- Inf
arima_model <- ''
cont = 0
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=12))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05
&& Box.test(arima$residuals, lag=24, fitdf=pi+qi+Pi+Qi)$p.value >= 0.05
&& jarque.bera.test(arima$residuals[-which.max(arima$residuals)])$p.value>= 0.05){
cont <- cont+1
if(rmse < min){
min <- rmse
arima_model <- paste(pi,di,qi,Pi,Di,Qi)
}
}
}
},
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model, "cont"=cont))
}
arima_model = getBestArima(0,0,0,0,0,0)
print(proc.time()-tm)
arima_model
model1 = Arima(log(visados.ts), order=c(1,2,2), seasonal=list(order=c(1,0,2), period=12))
# We suggest using h=10h=10 for non-seasonal data and h=2mh=2m for seasonal data, where mm is the period of seasonality.
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=7)
jarque.bera.test(model1$residuals)
which.max(model1$residuals[-117])
jarque.bera.test(model1$residuals[-117])
summary(model1)
Box.test(model1$residuals, lag=24, fitdf=6)
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=6)
jarque.bera.test(model1$residuals)
which.max(model1$residuals[-117])
jarque.bera.test(model1$residuals[-117])
summary(model1)
auto.arima(log(visados.ts))
model1 = Arima(log(visados.ts), order=c(1,2,2), seasonal=list(order=c(1,0,2), period=12))
# We suggest using h=10h=10 for non-seasonal data and h=2mh=2m for seasonal data, where mm is the period of seasonality.
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=6)
jarque.bera.test(model1$residuals)
which.max(model1$residuals[-117])
jarque.bera.test(model1$residuals[-117])
jarque.bera.test(model1$residuals[-193])
which.max(model1$residuals)
jarque.bera.test(model1$residuals[-117])
summary(model1)
getBestArima <- function(p, d, q, P, D, Q, s=0){ return(s)}
getBestArima(s=1)
getBestArima()
tm <- proc.time()
getBestArima <- function(p, d, q, P, D, Q, s=0){
min <- Inf
arima_model <- ''
# Rob Hyndman and George Athanasopoulos recommendation
lag = 2*s
if(s==0){lag=10}
for(pi in p:2){
for(di in d:2){
for(qi in q:2){
for(Pi in P:2){
for(Di in D:2){
for(Qi in Q:2){
tryCatch({
if(di+Di <= 2){
arima <- Arima(log(visados.ts), order=c(pi,di,qi), seasonal=list(order=c(Pi,Di,Qi), period=s))
rmse = accuracy(arima)[2]
if(t.test(arima$residuals)$p.value >= 0.05
&& Box.test(arima$residuals, lag=lag, fitdf=pi+qi+Pi+Qi)$p.value >= 0.05
&& jarque.bera.test(arima$residuals[-which.max(arima$residuals)])$p.value >= 0.05){
if(rmse < min){
min <- rmse
arima_model <- arima
}
}
}
},
# Sometimes the ARIMA model cannot be calculated with some fixed parameters.
error=function(cond){})
}
}
}
}
}
}
return(list("min"=min, "arima"=arima_model))
}
arima_model = getBestArima(0,0,0,0,0,0, s=12)
arima_model
model1
model1$var.coef
model1$arma
model1
model1$x
model1
model1$coef
model1$sigma2
model1$var.coef
model1
model1$call
model1$code
model1$n.cond
model1$nobs
model1$model
model1
model1$call
model1$call$seasonal
model1$call$seasonal$order
model2 = Arima(log(visados.ts), order=c(2,1,0), seasonal=list(order=c(0,1,2), period=12))
t.test(model2$residuals)
Box.test(model2$residuals, lag=24, fitdf=4, type="L")
jarque.bera.test(model2$residuals)
which.max(model2$residuals)
jarque.bera.test(model2$residuals[-117])
source(../src/getBestArima)
source("../src/getBestArima"")
source("../src/getBestArima")
source("../src/getBestArima")
source("../src/getBestArima.R")
arima_model = getBestArima(0,0,0,0,0,0, s=12)
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=FALSE)$arima
source("../src/getBestArima.R")
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=FALSE)$arima
View(getBestArima)
source("../src/getBestArima.R")
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=FALSE)$arima
arima_model
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=TRUE)$arima
arima_model
~FALSE
!FALSE
source("../src/getBestArima.R")
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=FALSE)
arima_model
source("../src/getBestArima.R")
arima_model = getBestArima(0,1,1,0,1,1, s=12, hypothesis=FALSE)
arima_model
model1 = arima_model$arima
t.test(model1$residuals)
Box.test(model1$residuals, lag=24, fitdf=5)
jarque.bera.test(model1$residuals)
which.max(model1$residuals)
jarque.bera.test(model1$residuals[-117])
arima_model2 = getBestArima(0,0,0,0,0,0, s=12, hypothesis=TRUE)
arima_model2
model2 = Arima(log(visados.ts), order=c(1,2,2), seasonal=list(order=c(1,0,2), period=12))
t.test(model2$residuals)
Box.test(model2$residuals, lag=24, fitdf=6, type="L")
jarque.bera.test(model2$residuals)
which.max(model2$residuals)
jarque.bera.test(model2$residuals[-117])
model1
